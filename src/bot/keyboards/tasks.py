from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.db.enums import TaskState
from src.db.models import Task

TASK_STATES_COLORS = {
    TaskState.SKIPPED: 'üîµ',
    TaskState.FAILED: 'üî¥',
    TaskState.PASSED: 'üü¢',
    TaskState.IMPOSSIBLE: 'üü°',
}

TASK_STATES_CB_DATA = {
    'skipped': TaskState.SKIPPED,
    'failed': TaskState.FAILED,
    'passed': TaskState.PASSED,
    'impossible': TaskState.IMPOSSIBLE
}

TASK_STATES_TRANSLATIONS = {
    'SKIPPED': '–ü—Ä–æ–ø—É—â–µ–Ω',
    'FAILED': '–ù–µ –ø—Ä–æ–π–¥–µ–Ω',
    'IMPOSSIBLE': '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏',
    'PASSED': '–ü—Ä–æ–π–¥–µ–Ω'
}

EDIT_TASK_STATUS_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ü—Ä–æ–π–¥–µ–Ω üü¢', callback_data='set_passed'),
            InlineKeyboardButton(text='–ù–µ –ø—Ä–æ–π–¥–µ–Ω üî¥', callback_data='set_failed')
        ],
        [
            InlineKeyboardButton(text='–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ üü°', callback_data='set_impossible'),
            InlineKeyboardButton(text='–ü—Ä–æ–ø—É—â–µ–Ω üîµ', callback_data='set_skipped'),
        ]
    ]
)


async def get_tasks_kb(
        tasks: list[Task],
        is_session_running: bool = False
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    for task in tasks:
        builder.row(
            InlineKeyboardButton(
                text=f'{task.name} {TASK_STATES_COLORS[task.state]}',
                callback_data=f'show_{task.id}'
            )
        )

        if is_session_running:
            builder.row(
                InlineKeyboardButton(
                    text='‚úèÔ∏è',
                    callback_data=f'edit_{task.id}'
                ),
                InlineKeyboardButton(
                    text='üí¨',
                    callback_data=f'comment_{task.id}'
                ),
                InlineKeyboardButton(
                    text='üîó',
                    callback_data=f'report_{task.id}'
                ),
            )

    if not is_session_running:
        builder.row(
            InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É ‚è¨', callback_data='add')
        )
        if tasks:
            builder.row(
                InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é ‚ñ∂Ô∏è', callback_data=f'run_{tasks[0].checklist.id}')
            )

    return builder.as_markup(resize_keyboard=True)
